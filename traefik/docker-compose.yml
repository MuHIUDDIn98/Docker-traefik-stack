version: '3.8'

services:
  traefik:
    image: "traefik:v3.5"
    container_name: "traefik-proxy"
    env_file: .env # <-- Loads the variables from traefik/.env
    environment:
      # This securely passes the token from the .env file
      # into the container's environment
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    command:
      # --- API, Providers, & Dynamic Config ---
      - "--api.dashboard=true" # Enables the web dashboard
      - "--providers.docker=true" # Tells Traefik to watch Docker
      - "--providers.docker.exposedbydefault=false" # CRITICAL: Don't expose any container unless it has a label
      - "--providers.docker.network=traefik-public" # CRITICAL: Only watch containers on this network
      - "--providers.file.directory=/dynamic_conf" # Load middlewares.yml

      # --- Enable Prometheus Metrics ---
      - "--metrics.prometheus=true" # Creates a /metrics endpoint
      - "--metrics.prometheus.entrypoint=metrics" # Makes it available on the 'metrics' entrypoint

      # --- Entrypoints (Ports) ---
      - "--entrypoints.web.address=:80" # For HTTP traffic
      - "--entrypoints.websecure.address=:443" # For HTTPS traffic
      - "--entrypoints.metrics.address=:8082" # For Prometheus (internal only)

      # --- Global HTTP to HTTPS Redirect ---
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      # --- Let's Encrypt (ACME) with DNS-01 Challenge ---
      - "--certificatesresolvers.myresolver.acme.email=${MY_EMAIL}" # Uses your email
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Where to save certs
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true" # Use DNS-01
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare" # Use Cloudflare

      # --- Wildcard Certificate Request ---
      - "--certificatesresolvers.myresolver.acme.domains[0].main=${MY_DOMAIN}"
      - "--certificatesresolvers.myresolver.acme.domains[0].sans=*.${MY_DOMAIN}"

      # --- Attach the resolver to our HTTPS entrypoint ---
      - "--entrypoints.websecure.http.tls.certresolver=myresolver"

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-certs:/letsencrypt"
      - "./dynamic_conf:/dynamic_conf:ro"

    networks:
      # This block just lists the networks to JOIN
      - traefik-public

    labels:
      # --- Secure the Dashboard ---
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${MY_DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.middlewares=authelia-auth@file,sec-headers@file"

volumes:
  traefik-certs: # Defines the persistent volume for certs

# --- THIS IS THE CORRECT, TOP-LEVEL BLOCK ---
# This block DEFINES the networks used in this file
networks:
  traefik-public:
    external: true # Tells Docker Compose to use the network you already created